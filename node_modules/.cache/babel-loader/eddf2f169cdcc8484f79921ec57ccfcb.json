{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications/Applications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApplicationGeneral from './ApplicationGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Applications() {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}applications`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (json.applications === undefined) {\n        setErrors(json.err.errors);\n        setLoaded(true);\n      } else {\n        setApplications(json.applications);\n        setLoaded(true);\n      }\n    }).catch(err => {\n      setErrors(['There was an error while fetching data: ', err]);\n      setLoaded(true);\n    });\n  }, [errors]);\n\n  const onClickAddNew = () => {\n    navigate('/dashboard/applications/new');\n  };\n\n  return loaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn-action\",\n      onClick: () => onClickAddNew(),\n      children: \"Add New Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this), applications.map(application => /*#__PURE__*/_jsxDEV(ApplicationGeneral, {\n      application: application\n    }, application._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)), errors !== [] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"errors\",\n      children: errors.map(err => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: err.msg\n      }, err.param, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 38\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }, this) : '']\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Applications, \"zPmP5Uq17Qbw0nou1ofe7y+tuYs=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Applications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications/Applications.js"],"names":["React","useEffect","useState","useNavigate","ApplicationGeneral","LoadingSpinner","Applications","applications","setApplications","errors","setErrors","loaded","setLoaded","navigate","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","undefined","err","catch","onClickAddNew","map","application","_id","msg","param"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,cAArC,EAAoD;AACvDC,MAAAA,MAAM,EAAE,KAD+C;AAEvDC,MAAAA,WAAW,EAAE;AAF0C,KAApD,CAAL,CAIGC,IAJH,CAISC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJjB,EAKGF,IALH,CAKSE,IAAD,IAAU;AACd,UAAIA,IAAI,CAACf,YAAL,KAAsBgB,SAA1B,EAAqC;AACnCb,QAAAA,SAAS,CAACY,IAAI,CAACE,GAAL,CAASf,MAAV,CAAT;AACAG,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD,OAHD,MAGO;AACLJ,QAAAA,eAAe,CAACc,IAAI,CAACf,YAAN,CAAf;AACAK,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,KAbH,EAcGa,KAdH,CAcUD,GAAD,IAAS;AACdd,MAAAA,SAAS,CAAC,CAAC,0CAAD,EAA6Cc,GAA7C,CAAD,CAAT;AACAZ,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAjBH;AAkBD,GAnBQ,EAmBN,CAACH,MAAD,CAnBM,CAAT;;AAqBA,QAAMiB,aAAa,GAAG,MAAM;AAC1Bb,IAAAA,QAAQ,CAAC,6BAAD,CAAR;AACD,GAFD;;AAIA,SACEF,MAAM,gBAEF;AAAA,4BACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAA6C,MAAA,OAAO,EAAE,MAAMe,aAAa,EAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGnB,YAAY,CAACoB,GAAb,CAAkBC,WAAD,iBAChB,QAAC,kBAAD;AAEE,MAAA,WAAW,EAAEA;AAFf,OACOA,WAAW,CAACC,GADnB;AAAA;AAAA;AAAA;AAAA,YADD,CAFH,EAQGpB,MAAM,KAAK,EAAX,gBAEG;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGA,MAAM,CAACkB,GAAP,CAAYH,GAAD,iBAAS;AAAA,kBAAoBA,GAAG,CAACM;AAAxB,SAAQN,GAAG,CAACO,KAAZ;AAAA;AAAA;AAAA;AAAA,cAApB;AADH;AAAA;AAAA;AAAA;AAAA,YAFH,GAMG,EAdN;AAAA,kBAFE,gBAmBF,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UApBN;AAsBD;;GApDuBzB,Y;UAILH,W;;;KAJKG,Y","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ApplicationGeneral from './ApplicationGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\n\nexport default function Applications() {\n  const [applications, setApplications] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}applications`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (json.applications === undefined) {\n          setErrors(json.err.errors);\n          setLoaded(true);\n        } else {\n          setApplications(json.applications);\n          setLoaded(true);\n        }\n      })\n      .catch((err) => {\n        setErrors(['There was an error while fetching data: ', err]);\n        setLoaded(true);\n      });\n  }, [errors]);\n\n  const onClickAddNew = () => {\n    navigate('/dashboard/applications/new');\n  };\n\n  return (\n    loaded\n      ? (\n        <>\n          <button type=\"button\" className=\"btn-action\" onClick={() => onClickAddNew()}>Add New Application</button>\n          {applications.map((application) => (\n            <ApplicationGeneral\n              key={application._id}\n              application={application}\n            />\n          ))}\n          {errors !== []\n            ? (\n              <div className=\"errors\">\n                {errors.map((err) => <p key={err.param}>{err.msg}</p>)}\n              </div>\n            )\n            : ''}\n        </>\n      )\n      : <LoadingSpinner />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}