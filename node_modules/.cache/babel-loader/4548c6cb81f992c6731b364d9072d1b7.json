{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createTree = (applicationsArray, interviewsArray) => {\n    const treeGen = [];\n    const appElements = applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`\n      },\n      position: {\n        x: 250 + 200 * index,\n        y: 20\n      },\n      draggable: false,\n      isHidden: false\n    }));\n    const intervElements = interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'output',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`\n      },\n      position: {\n        x: 100 + 200 * index,\n        y: 100\n      },\n      draggable: false,\n      isHidden: false\n    }));\n    treeGen.concat(appElements, intervElements);\n    return tree;\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (typeof json.err !== 'undefined') {\n        console.log('Fetching error', json.err);\n      } else {\n        setApplications(json.applications);\n        setInterviews(json.interviews);\n        setTree(createTree(json.applications, json.interviews));\n      }\n    }).catch(err => console.log('error: ', err)).finally(setLoaded(true));\n  }, []);\n  return loaded ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: tree\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"Fdcepa2vivaprL1QdMVv5+b1y7Q=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js"],"names":["React","useState","useEffect","ReactFlow","Position","format","parseISO","LoadingSpinner","Profile","applications","setApplications","interviews","setInterviews","connections","setConnections","tree","setTree","loaded","setLoaded","createTree","applicationsArray","interviewsArray","treeGen","appElements","map","application","index","id","_id","type","data","label","company_name","position","x","y","draggable","isHidden","intervElements","interview","date","concat","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","err","console","log","catch","finally"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default function Profile() {\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createTree = (applicationsArray, interviewsArray) => {\n    const treeGen = [];\n    const appElements = applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`,\n      },\n      position: { x: 250 + 200 * index, y: 20 },\n      draggable: false,\n      isHidden: false,\n    }));\n    const intervElements = interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'output',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`,\n      },\n      position: { x: 100 + 200 * index, y: 100 },\n      draggable: false,\n      isHidden: false,\n    }));\n    treeGen.concat(appElements, intervElements);\n    return tree;\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (typeof json.err !== 'undefined') {\n          console.log('Fetching error', json.err);\n        } else {\n          setApplications(json.applications);\n          setInterviews(json.interviews);\n          setTree(createTree(json.applications, json.interviews));\n        }\n      })\n      .catch((err) => console.log('error: ', err))\n      .finally(setLoaded(true));\n  }, []);\n\n  return (\n    loaded\n      ? (\n        <ReactFlow elements={tree} />\n      )\n      : <LoadingSpinner />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}