{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Interviews/Interviews.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport InterviewGeneral from './InterviewGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Interviews() {\n  _s();\n\n  const [loaded, setLoaded] = useState(false);\n  const [interviews, setInterviews] = useState([]);\n  const [, setErrors] = useState([]);\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}interviews`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (typeof json.err !== 'undefined') {\n        setErrors(json.err.errors);\n      } else {\n        setInterviews(json.interviews);\n        setLoaded(true);\n      }\n    }).catch(err => setErrors(err));\n  }, [loaded]);\n  return !loaded ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn-action\",\n      onClick: () => onClickAddNew(),\n      children: \"Add New Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), interviews.map(interview => /*#__PURE__*/_jsxDEV(InterviewGeneral, {\n      interview: interview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 40\n    }, this))]\n  }, void 0, true);\n}\n\n_s(Interviews, \"ukWoeScrT0hNATJH+f8OQbYti/s=\");\n\n_c = Interviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interviews\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Interviews/Interviews.js"],"names":["React","useEffect","useState","InterviewGeneral","LoadingSpinner","Interviews","loaded","setLoaded","interviews","setInterviews","setErrors","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","err","errors","catch","onClickAddNew","map","interview"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,GAAGQ,SAAH,IAAgBR,QAAQ,CAAC,EAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,YAArC,EAAkD;AACrDC,MAAAA,MAAM,EAAE,KAD6C;AAErDC,MAAAA,WAAW,EAAE;AAFwC,KAAlD,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISE,IAAD,IAAU;AACd,UAAI,OAAOA,IAAI,CAACC,GAAZ,KAAoB,WAAxB,EAAqC;AACnCV,QAAAA,SAAS,CAACS,IAAI,CAACC,GAAL,CAASC,MAAV,CAAT;AACD,OAFD,MAEO;AACLZ,QAAAA,aAAa,CAACU,IAAI,CAACX,UAAN,CAAb;AACAD,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,KAXH,EAYGe,KAZH,CAYUF,GAAD,IAASV,SAAS,CAACU,GAAD,CAZ3B;AAaD,GAdQ,EAcN,CAACd,MAAD,CAdM,CAAT;AAgBA,SACE,CAACA,MAAD,gBACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UADJ,gBAEI;AAAA,4BACA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,YAAhC;AAA6C,MAAA,OAAO,EAAE,MAAMiB,aAAa,EAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAICf,UAAU,CAACgB,GAAX,CAAgBC,SAAD,iBAAe,QAAC,gBAAD;AAAkB,MAAA,SAAS,EAAEA;AAA7B;AAAA;AAAA;AAAA;AAAA,YAA9B,CAJD;AAAA,kBAHN;AAUD;;GA/BuBpB,U;;KAAAA,U","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport InterviewGeneral from './InterviewGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\n\nexport default function Interviews() {\n  const [loaded, setLoaded] = useState(false);\n  const [interviews, setInterviews] = useState([]);\n  const [, setErrors] = useState([]);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}interviews`, {\n      method: 'GET',\n      credentials: 'include',\n    }).then((res) => res.json())\n      .then((json) => {\n        if (typeof json.err !== 'undefined') {\n          setErrors(json.err.errors);\n        } else {\n          setInterviews(json.interviews);\n          setLoaded(true);\n        }\n      })\n      .catch((err) => setErrors(err));\n  }, [loaded]);\n\n  return (\n    !loaded\n      ? <LoadingSpinner />\n      : <>\n        <button type=\"button\" className=\"btn-action\" onClick={() => onClickAddNew()}>\n          Add New Application\n        </button>\n        {interviews.map((interview) => <InterviewGeneral interview={interview} />)}\n        </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}