{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createApplicationsElements = applicationsArray => {\n    const newArray = applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`\n      },\n      position: {\n        x: 250 + 200 * index,\n        y: 20\n      },\n      draggable: false,\n      isHidden: false\n    }));\n    return newArray;\n  };\n\n  const createInterviewsElements = interviewsArray => {\n    const newArray = interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'default',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`\n      },\n      position: {\n        x: 100 + 75 * (interviewsArray.length - 1) * index,\n        y: 100 + 75 * index\n      },\n      draggable: false,\n      isHidden: false\n    }));\n    const connections = interviewsArray.map(interview => ({\n      id: `${interview._id}-${interview.application}`,\n      source: interview.application,\n      target: interview._id\n    }));\n    const results = newArray.concat(connections);\n    return results;\n  };\n\n  const createOffersElement = offerArray => {\n    const offerElementsArray = offerArray.map((offer, index) => ({\n      id: offer._id,\n      type: 'output',\n      data: {\n        label: `Offer was received ${format(parseISO(offer.received), 'yyyy-MM-dd')}`\n      },\n      position: {\n        x: 50 + 25 * index,\n        y: 150 + 75 * index\n      },\n      draggable: false,\n      isHidden: false\n    }));\n    const connections = offerArray.map((offer, index) => ({\n      id: `${offer._id}-${offer.interview}`,\n      source: offer.interview,\n      target: offer._id\n    }));\n    const results = offerElementsArray.concat(connections);\n    return results;\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (typeof json.err !== 'undefined') {\n        console.log('Fetching error', json.err);\n      } else {\n        setApplications(json.applications);\n        setInterviews(json.interviews);\n        setElements(createApplicationsElements(json.applications));\n        setElements(old => old.concat(createInterviewsElements(json.interviews)));\n        setElements(old => old.concat(createOffersElement(json.offers)));\n      }\n    }).catch(err => console.log('error: ', err)).finally(setLoaded(true));\n  }, []);\n  return loaded ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"8FIlGQGTwwRi7gwWj9/cfkwQ+wI=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js"],"names":["React","useState","useEffect","ReactFlow","Position","format","parseISO","LoadingSpinner","Profile","applications","setApplications","interviews","setInterviews","elements","setElements","tree","setTree","loaded","setLoaded","createApplicationsElements","applicationsArray","newArray","map","application","index","id","_id","type","data","label","company_name","position","x","y","draggable","isHidden","createInterviewsElements","interviewsArray","interview","date","length","connections","source","target","results","concat","createOffersElement","offerArray","offerElementsArray","offer","received","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","err","console","log","old","offers","catch","finally"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default function Profile() {\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createApplicationsElements = (applicationsArray) => {\n    const newArray = applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`,\n      },\n      position: { x: 250 + 200 * index, y: 20 },\n      draggable: false,\n      isHidden: false,\n    }));\n    return newArray;\n  };\n\n  const createInterviewsElements = (interviewsArray) => {\n    const newArray = interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'default',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`,\n      },\n      position: { x: 100 + 75 * (interviewsArray.length - 1) * index, y: 100 + 75 * index },\n      draggable: false,\n      isHidden: false,\n    }));\n    const connections = interviewsArray.map((interview) => ({\n      id: `${interview._id}-${interview.application}`,\n      source: interview.application,\n      target: interview._id,\n    }));\n    const results = newArray.concat(connections);\n    return results;\n  };\n\n  const createOffersElement = (offerArray) => {\n    const offerElementsArray = offerArray.map((offer, index) => ({\n      id: offer._id,\n      type: 'output',\n      data: {\n        label: `Offer was received ${format(parseISO(offer.received), 'yyyy-MM-dd')}`,\n      },\n      position: { x: 50 + 25 * index, y: 150 + 75 * index },\n      draggable: false,\n      isHidden: false,\n    }));\n    const connections = offerArray.map((offer, index) => ({\n      id: `${offer._id}-${offer.interview}`,\n      source: offer.interview,\n      target: offer._id,\n    }));\n    const results = offerElementsArray.concat(connections);\n    return results;\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (typeof json.err !== 'undefined') {\n          console.log('Fetching error', json.err);\n        } else {\n          setApplications(json.applications);\n          setInterviews(json.interviews);\n          setElements(createApplicationsElements(json.applications));\n          setElements((old) => old.concat(createInterviewsElements(json.interviews)));\n          setElements((old) => old.concat(createOffersElement(json.offers)));\n        }\n      })\n      .catch((err) => console.log('error: ', err))\n      .finally(setLoaded(true));\n  }, []);\n\n  return (\n    loaded\n      ? (\n        <ReactFlow elements={elements} />\n      )\n      : <LoadingSpinner />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}