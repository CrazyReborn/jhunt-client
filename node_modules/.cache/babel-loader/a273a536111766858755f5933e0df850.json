{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications/Applications.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport ApplicationGeneral from './ApplicationGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\nimport ErrorPopUp from './ErrorPopUp';\nimport '../../styles/Applications.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Applications(_ref) {\n  _s();\n\n  let {\n    rerender\n  } = _ref;\n  const [applications, setApplications] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [gotErr, setGotErr] = useState(false);\n  const [salaryUsrAvg, setSalaryUsrAvg] = useState(0);\n  const [salaryAllAvg, setSalaryAllAvg] = useState(0);\n\n  function calculateAvgSalary() {\n    const count = applications.length;\n    let sum = 0;\n    applications.forEach(e => {\n      sum += e.salary;\n    });\n    setSalaryUsrAvg(sum / count);\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}applications`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (json.applications === undefined) {\n        setErrors(json.err.errors);\n      } else {\n        setApplications(json.applications);\n      }\n\n      setSalaryAllAvg(json.averagesAll[0].avg);\n      setGotErr(errors.length > 0);\n    }).catch(err => {\n      setErrors(['There was an error while fetching data: ', err]);\n    }).finally(() => {\n      setLoaded(true);\n    });\n  }, [rerender]);\n  useEffect(() => {\n    calculateAvgSalary();\n  }, [loaded]);\n\n  if (applications.length > 0) {\n    return loaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"applications\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"application\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Company\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Position\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Salary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"table-head-date\",\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: applications.sort((prev, next) => new Date(next.date) - new Date(prev.date)).map(application => /*#__PURE__*/_jsxDEV(ApplicationGeneral, {\n              application: application,\n              salaryUsrAvg: salaryUsrAvg,\n              salaryAllAvg: salaryAllAvg\n            }, application._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorPopUp, {\n        errors: errors,\n        gotErr: gotErr,\n        setGotErr: setGotErr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No applicaitons were added yet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Applications, \"JlrDYBN4Y/+EDDWVnImu6LfCwNg=\");\n\n_c = Applications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications/Applications.js"],"names":["React","useEffect","useState","ApplicationGeneral","LoadingSpinner","ErrorPopUp","Applications","rerender","applications","setApplications","errors","setErrors","loaded","setLoaded","gotErr","setGotErr","salaryUsrAvg","setSalaryUsrAvg","salaryAllAvg","setSalaryAllAvg","calculateAvgSalary","count","length","sum","forEach","e","salary","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","undefined","err","averagesAll","avg","catch","finally","sort","prev","next","Date","date","map","application","_id"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport ApplicationGeneral from './ApplicationGeneral';\nimport LoadingSpinner from '../LoadingSpinner';\nimport ErrorPopUp from './ErrorPopUp';\nimport '../../styles/Applications.css';\n\nexport default function Applications({ rerender }) {\n  const [applications, setApplications] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [gotErr, setGotErr] = useState(false);\n  const [salaryUsrAvg, setSalaryUsrAvg] = useState(0);\n  const [salaryAllAvg, setSalaryAllAvg] = useState(0);\n\n  function calculateAvgSalary() {\n    const count = applications.length;\n    let sum = 0;\n    applications.forEach((e) => {\n      sum += e.salary;\n    });\n    setSalaryUsrAvg(sum / count);\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}applications`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (json.applications === undefined) {\n          setErrors(json.err.errors);\n        } else {\n          setApplications(json.applications);\n        }\n        setSalaryAllAvg(json.averagesAll[0].avg);\n        setGotErr(errors.length > 0);\n      })\n      .catch((err) => {\n        setErrors(['There was an error while fetching data: ', err]);\n      })\n      .finally(() => {\n        setLoaded(true);\n      });\n  }, [rerender]);\n\n  useEffect(() => {\n    calculateAvgSalary();\n  }, [loaded]);\n\n  if (applications.length > 0) {\n    return (\n      loaded\n        ? (\n          <>\n            <div className=\"applications\">\n              <table className=\"application\">\n                <thead>\n                  <tr>\n                    <th>Company</th>\n                    <th>Position</th>\n                    <th>Status</th>\n                    <th>Salary</th>\n                    <th className=\"table-head-date\">Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {applications.sort((prev, next) => (new Date(next.date) - new Date(prev.date)))\n                    .map((application) => (\n                      <ApplicationGeneral\n                        key={application._id}\n                        application={application}\n                        salaryUsrAvg={salaryUsrAvg}\n                        salaryAllAvg={salaryAllAvg}\n                      />\n                    ))}\n                </tbody>\n              </table>\n            </div>\n            <ErrorPopUp errors={errors} gotErr={gotErr} setGotErr={setGotErr} />\n          </>\n        )\n        : <LoadingSpinner />\n    );\n  }\n\n  return (\n    <p>No applicaitons were added yet</p>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}