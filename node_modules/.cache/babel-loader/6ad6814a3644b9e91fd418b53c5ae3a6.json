{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createApplicationsElements = applicationsArray => {\n    applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`\n      },\n      position: {\n        x: 250 + 200 * index,\n        y: 20\n      },\n      draggable: false,\n      isHidden: false\n    }));\n  };\n\n  const createInterviewsElements = interviewsArray => {\n    interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'output',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`\n      },\n      position: {\n        x: 200 + 250 * index,\n        y: 100\n      },\n      draggable: false,\n      isHidden: false\n    }));\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (typeof json.err !== 'undefined') {\n        console.log('Fetching error', json.err);\n      } else {\n        setApplications(json.applications);\n        setInterviews(json.interviews);\n      }\n    }).then(() => {\n      createApplicationsElements(applications);\n      setElements(elements.concat(createInterviewsElements(interviews)));\n    }).catch(err => console.log('error: ', err)).finally(setLoaded(true));\n  }, []);\n  return loaded ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"OI0rv4oWXWqTZtmdLHAu4146DAc=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js"],"names":["React","useState","useEffect","ReactFlow","Position","format","parseISO","LoadingSpinner","Profile","applications","setApplications","interviews","setInterviews","elements","setElements","connections","setConnections","tree","setTree","loaded","setLoaded","createApplicationsElements","applicationsArray","map","application","index","id","_id","type","data","label","company_name","position","x","y","draggable","isHidden","createInterviewsElements","interviewsArray","interview","date","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","err","console","log","concat","catch","finally"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { Position } from 'react-flow-renderer';\nimport format from 'date-fns/format';\nimport parseISO from 'date-fns/parseISO';\nimport LoadingSpinner from './LoadingSpinner';\n\nexport default function Profile() {\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [elements, setElements] = useState([]);\n  const [connections, setConnections] = useState([]);\n  const [tree, setTree] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const createApplicationsElements = (applicationsArray) => {\n    applicationsArray.map((application, index) => ({\n      id: application._id,\n      type: 'input',\n      data: {\n        label: `Listing at ${application.company_name}`,\n      },\n      position: { x: 250 + 200 * index, y: 20 },\n      draggable: false,\n      isHidden: false,\n    }));\n  };\n\n  const createInterviewsElements = (interviewsArray) => {\n    interviewsArray.map((interview, index) => ({\n      id: interview._id,\n      type: 'output',\n      data: {\n        label: `Interview on ${format(parseISO(interview.date), 'yyyy-MM-dd')}`,\n      },\n      position: { x: 200 + 250 * index, y: 100 },\n      draggable: false,\n      isHidden: false,\n    }));\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (typeof json.err !== 'undefined') {\n          console.log('Fetching error', json.err);\n        } else {\n          setApplications(json.applications);\n          setInterviews(json.interviews);\n        }\n      })\n      .then(() => {\n        createApplicationsElements(applications);\n        setElements(elements.concat(createInterviewsElements(interviews)));\n      })\n      .catch((err) => console.log('error: ', err))\n      .finally(setLoaded(true));\n  }, []);\n\n  return (\n    loaded\n      ? (\n        <ReactFlow elements={elements} />\n      )\n      : <LoadingSpinner />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}