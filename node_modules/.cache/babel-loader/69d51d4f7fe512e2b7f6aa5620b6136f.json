{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ApplicationGeneral from \"./Application\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Applications() {\n  _s();\n\n  const [applications, setApplicatoins] = useState([]);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API_SERVER + 'applications', {\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (json.applications === undefined) {\n        setErrors(json.err.errors);\n      } else {\n        setApplicatoins(json.applications);\n      }\n    }).catch(err => setErrors(['There was an error while fetching data: ', err]));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [applications.map(application => {\n      return /*#__PURE__*/_jsxDEV(ApplicationGeneral, {\n        application: application\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this);\n    }), errors !== [] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"errors\",\n      children: errors.map(err => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: err.msg\n        }, err.param, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true);\n}\n\n_s(Applications, \"jXttlk7XpvAA2jJPlLorWgNOndY=\");\n\n_c = Applications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Applications.js"],"names":["useEffect","useState","ApplicationGeneral","Applications","applications","setApplicatoins","errors","setErrors","fetch","process","env","REACT_APP_API_SERVER","credentials","then","res","json","undefined","err","catch","map","application","msg","param"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,kBAAP,MAA+B,eAA/B;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,GAAmC,cAApC,EAAoD;AACvDC,MAAAA,WAAW,EAAE;AAD0C,KAApD,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHf,EAIGF,IAJH,CAISE,IAAD,IAAU;AACd,UAAIA,IAAI,CAACX,YAAL,KAAsBY,SAA1B,EAAqC;AACnCT,QAAAA,SAAS,CAACQ,IAAI,CAACE,GAAL,CAASX,MAAV,CAAT;AACD,OAFD,MAEO;AACLD,QAAAA,eAAe,CAACU,IAAI,CAACX,YAAN,CAAf;AACD;AACF,KAVH,EAWGc,KAXH,CAWSD,GAAG,IAAIV,SAAS,CAAC,CAAC,0CAAD,EAA6CU,GAA7C,CAAD,CAXzB;AAYD,GAbQ,CAAT;AAcA,sBACE;AAAA,eACGb,YAAY,CAACe,GAAb,CAAkBC,WAAD,IAAiB;AACjC,0BACE,QAAC,kBAAD;AAAoB,QAAA,WAAW,EAAEA;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF;AAGD,KAJA,CADH,EAMGd,MAAM,KAAK,EAAX,gBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGA,MAAM,CAACa,GAAP,CAAYF,GAAD,IAAS;AACnB,4BACE;AAAA,oBAAoBA,GAAG,CAACI;AAAxB,WAAQJ,GAAG,CAACK,KAAZ;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD,OAJA;AADH;AAAA;AAAA;AAAA;AAAA,YADD,gBAQG,qCAdN;AAAA,kBADF;AAkBD;;GAnCuBnB,Y;;KAAAA,Y","sourcesContent":["import { useEffect, useState } from \"react\"\nimport ApplicationGeneral from \"./Application\";\n\nexport default function Applications() {\n  const [applications, setApplicatoins] = useState([]);\n  const [errors, setErrors] = useState([]);\n  useEffect(() => {\n    fetch(process.env.REACT_APP_API_SERVER + 'applications', {\n      credentials: 'include'\n    })\n      .then(res => res.json())\n      .then((json) => {\n        if (json.applications === undefined) {\n          setErrors(json.err.errors);\n        } else {\n          setApplicatoins(json.applications);\n        }\n      })\n      .catch(err => setErrors(['There was an error while fetching data: ', err]))\n  })\n  return (\n    <>\n      {applications.map((application) => {\n        return (\n          <ApplicationGeneral application={application} />\n        )\n      })}\n      {errors !== [] ?\n        <div className=\"errors\">\n          {errors.map((err) => {\n            return (\n              <p key={err.param}>{err.msg}</p>\n            )\n          })}\n        </div>\n        : <></>}\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}