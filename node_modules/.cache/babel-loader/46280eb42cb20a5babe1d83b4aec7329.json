{"ast":null,"code":"var _jsxFileName = \"/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow from 'react-flow-renderer';\nimport LoadingSpinner from './LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst elements = [{\n  id: '1',\n  data: {\n    label: 'Node 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}, // you can also pass a React component as a label\n{\n  id: '2',\n  data: {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Node 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 20\n    }, this)\n  },\n  position: {\n    x: 100,\n    y: 100\n  }\n}, {\n  id: 'e1-2',\n  source: '1',\n  target: '2',\n  animated: true\n}];\nexport default function Profile() {\n  _s();\n\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include'\n    }).then(res => res.json()).then(json => {\n      if (typeof json.err !== 'undefined') {\n        console.log('Fetching error', json.err);\n      } else {\n        setApplications(json.applications);\n        setInterviews(json.interviews);\n        setLoaded(true);\n      }\n    }).catch(err => console.log('error: ', err));\n  }, []);\n  return loaded ? /*#__PURE__*/_jsxDEV(ReactFlow, {\n    elements: elements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Profile, \"ZTuNef1MR6sFaeKYjsB06Kf/9gA=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/crazy_reborn/the_odin_project/jhunt-client/src/components/Profile.js"],"names":["React","useState","useEffect","ReactFlow","LoadingSpinner","elements","id","data","label","position","x","y","source","target","animated","Profile","applications","setApplications","interviews","setInterviews","loaded","setLoaded","fetch","process","env","REACT_APP_API_SERVER","method","credentials","then","res","json","err","console","log","catch"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,QAAQ,GAAG,CACf;AACEC,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAFR;AAGEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAHZ,CADe,EAMf;AACA;AACEL,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAT,GAFR;AAGEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb;AAHZ,CAPe,EAYf;AACEL,EAAAA,EAAE,EAAE,MADN;AAEEM,EAAAA,MAAM,EAAE,GAFV;AAGEC,EAAAA,MAAM,EAAE,GAHV;AAIEC,EAAAA,QAAQ,EAAE;AAJZ,CAZe,CAAjB;AAoBA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,SAArC,EAA+C;AAClDC,MAAAA,MAAM,EAAE,KAD0C;AAElDC,MAAAA,WAAW,EAAE;AAFqC,KAA/C,CAAL,CAIGC,IAJH,CAISC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJjB,EAKGF,IALH,CAKSE,IAAD,IAAU;AACd,UAAI,OAAOA,IAAI,CAACC,GAAZ,KAAoB,WAAxB,EAAqC;AACnCC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,IAAI,CAACC,GAAnC;AACD,OAFD,MAEO;AACLd,QAAAA,eAAe,CAACa,IAAI,CAACd,YAAN,CAAf;AACAG,QAAAA,aAAa,CAACW,IAAI,CAACZ,UAAN,CAAb;AACAG,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,KAbH,EAcGa,KAdH,CAcUH,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB,CAdlB;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAiBA,SACEX,MAAM,gBAEF,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAEf;AAArB;AAAA;AAAA;AAAA;AAAA,UAFE,gBAIF,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,UALN;AAOD;;GA5BuBU,O;;KAAAA,O","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow from 'react-flow-renderer';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst elements = [\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    position: { x: 250, y: 5 },\n  },\n  // you can also pass a React component as a label\n  {\n    id: '2',\n    data: { label: <div>Node 2</div> },\n    position: { x: 100, y: 100 },\n  },\n  {\n    id: 'e1-2',\n    source: '1',\n    target: '2',\n    animated: true,\n  },\n];\n\nexport default function Profile() {\n  const [applications, setApplications] = useState([]);\n  const [interviews, setInterviews] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_SERVER}profile`, {\n      method: 'GET',\n      credentials: 'include',\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        if (typeof json.err !== 'undefined') {\n          console.log('Fetching error', json.err);\n        } else {\n          setApplications(json.applications);\n          setInterviews(json.interviews);\n          setLoaded(true);\n        }\n      })\n      .catch((err) => console.log('error: ', err));\n  }, []);\n  return (\n    loaded\n      ? (\n        <ReactFlow elements={elements} />\n      )\n      : <LoadingSpinner />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}